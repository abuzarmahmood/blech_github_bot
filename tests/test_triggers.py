"""
Tests for triggers.py
"""
import bot_tools
import triggers
import os
import sys
import pytest
from unittest.mock import patch, MagicMock

# Add src directory to path
sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), '../src')))


class TestTriggers:

    @pytest.fixture
    def mock_issue(self):
        """Create a basic mock issue"""
        return bot_tools.create_mock_issue()

    def test_has_blech_bot_tag(self, mock_issue):
        """Test detection of blech_bot tag"""
        # Issue without tag
        assert not triggers.has_blech_bot_tag(mock_issue)

        # Issue with tag
        tagged_issue = bot_tools.create_mock_issue(labels=["blech_bot"])
        assert triggers.has_blech_bot_tag(tagged_issue)

    def test_has_bot_response(self, mock_issue):
        """Test detection of bot response"""
        # Issue without bot response
        with patch('triggers.get_issue_comments', return_value=[]):
            assert not triggers.has_bot_response(mock_issue)

        # Issue with bot response
        bot_comment = bot_tools.create_mock_comment(
            "This is a response\n\n---\n*This response was automatically generated by blech_bot*",
            user_login="github-actions[bot]"
        )
        with patch('triggers.get_issue_comments', return_value=[bot_comment]):
            assert triggers.has_bot_response(mock_issue)

    def test_has_user_feedback(self, mock_issue):
        """Test detection of user feedback"""
        # Issue without feedback
        with patch('triggers.get_issue_comments', return_value=[]):
            assert not triggers.has_user_feedback(mock_issue)

        # Issue with bot response but no feedback
        bot_comment = bot_tools.create_mock_comment(
            "This is a response\n\n---\n*This response was automatically generated by blech_bot*",
            user_login="github-actions[bot]"
        )
        with patch('triggers.get_issue_comments', return_value=[bot_comment]):
            assert not triggers.has_user_feedback(mock_issue)

        # Issue with bot response and feedback
        user_comment = bot_tools.create_mock_comment(
            "This is user feedback",
            user_login="test_user"
        )
        with patch('triggers.get_issue_comments', return_value=[bot_comment, user_comment]):
            assert triggers.has_user_feedback(mock_issue)

    def test_has_develop_issue_trigger(self, mock_issue):
        """Test detection of develop_issue trigger"""
        # Issue without trigger
        with patch('triggers.get_issue_comments', return_value=[]):
            assert not triggers.has_develop_issue_trigger(mock_issue)

        # Issue with trigger
        trigger_comment = bot_tools.create_mock_comment(
            "[ develop_issue ]",
            user_login="test_user"
        )
        with patch('triggers.get_issue_comments', return_value=[trigger_comment]):
            assert triggers.has_develop_issue_trigger(mock_issue)

    def test_has_generate_edit_command_trigger(self, mock_issue):
        """Test detection of generate_edit_command trigger"""
        # Issue without trigger
        with patch('triggers.get_issue_comments', return_value=[]):
            assert not triggers.has_generate_edit_command_trigger(mock_issue)

        # Issue with trigger
        trigger_comment = bot_tools.create_mock_comment(
            "[ generate_edit_command ]",
            user_login="test_user"
        )
        with patch('triggers.get_issue_comments', return_value=[trigger_comment]):
            assert triggers.has_generate_edit_command_trigger(mock_issue)

    def test_has_pr_creation_comment(self, mock_issue):
        """Test detection of PR creation comment"""
        # Issue without PR comment
        with patch('triggers.get_issue_comments', return_value=[]):
            has_comment, comment = triggers.has_pr_creation_comment(mock_issue)
            assert not has_comment
            assert comment is None

        # Issue with PR comment
        pr_comment = bot_tools.create_mock_comment(
            "Created pull request: https://github.com/owner/repo/pull/123",
            user_login="github-actions[bot]"
        )
        with patch('triggers.get_issue_comments', return_value=[pr_comment]):
            has_comment, comment = triggers.has_pr_creation_comment(mock_issue)
            assert has_comment
            assert "Created pull request" in comment
