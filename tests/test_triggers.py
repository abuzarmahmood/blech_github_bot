"""
Tests for the triggers module
"""
from src.triggers import (
    has_blech_bot_tag,
    has_generate_edit_command_trigger,
    has_bot_response,
    has_user_feedback,
    has_develop_issue_trigger,
    has_pull_request_trigger,
    has_pr_creation_comment
)
import os
import sys
import pytest
from unittest.mock import MagicMock, patch

# Add src directory to path
src_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(src_dir)


def test_has_blech_bot_tag():
    """Test detection of blech_bot tag"""
    # Create mock issue with blech_bot label
    issue_with_tag = MagicMock()
    label = MagicMock()
    label.name = "blech_bot"
    issue_with_tag.labels = [label]

    # Create mock issue without blech_bot label
    issue_without_tag = MagicMock()
    other_label = MagicMock()
    other_label.name = "bug"
    issue_without_tag.labels = [other_label]

    # Test
    assert has_blech_bot_tag(issue_with_tag) is True
    assert has_blech_bot_tag(issue_without_tag) is False


@patch('src.triggers.get_issue_comments')
def test_has_generate_edit_command_trigger(mock_get_comments):
    """Test detection of generate_edit_command trigger"""
    # Setup mock comments
    comment1 = MagicMock()
    comment1.body = "Normal comment"
    comment2 = MagicMock()
    comment2.body = "[ generate_edit_command ]"

    # Test with trigger
    mock_get_comments.return_value = [comment1, comment2]
    assert has_generate_edit_command_trigger(MagicMock()) is True

    # Test without trigger
    mock_get_comments.return_value = [comment1]
    assert has_generate_edit_command_trigger(MagicMock()) is False


@patch('src.triggers.get_issue_comments')
def test_has_bot_response(mock_get_comments):
    """Test detection of bot response"""
    # Setup mock comments
    comment1 = MagicMock()
    comment1.body = "Normal comment"
    comment2 = MagicMock()
    comment2.body = "This comment was generated by blech_bot"

    # Test with bot response
    mock_get_comments.return_value = [comment1, comment2]
    assert has_bot_response(MagicMock()) is True

    # Test without bot response
    mock_get_comments.return_value = [comment1]
    assert has_bot_response(MagicMock()) is False


@patch('src.triggers.get_issue_comments')
def test_has_user_feedback(mock_get_comments):
    """Test detection of user feedback after bot response"""
    # Setup mock comments
    bot_comment = MagicMock()
    bot_comment.body = "This comment was generated by blech_bot"
    user_comment = MagicMock()
    user_comment.body = "User feedback"

    # Test with user feedback after bot comment
    mock_get_comments.return_value = [bot_comment, user_comment]
    assert has_user_feedback(MagicMock()) is True

    # Test without user feedback after bot comment
    mock_get_comments.return_value = [user_comment, bot_comment]
    assert has_user_feedback(MagicMock()) is False

    # Test with no bot comment
    mock_get_comments.return_value = [user_comment]
    assert has_user_feedback(MagicMock()) is False


@patch('src.triggers.get_issue_comments')
def test_has_develop_issue_trigger(mock_get_comments):
    """Test detection of develop_issue trigger"""
    # Setup mock comments
    comment1 = MagicMock()
    comment1.body = "Normal comment"
    comment2 = MagicMock()
    comment2.body = "[ develop_issue ]"

    # Test with trigger in last comment
    mock_get_comments.return_value = [comment1, comment2]
    assert has_develop_issue_trigger(MagicMock()) is True

    # Test with trigger not in last comment
    mock_get_comments.return_value = [comment2, comment1]
    assert has_develop_issue_trigger(MagicMock()) is False

    # Test with no comments
    mock_get_comments.return_value = []
    assert has_develop_issue_trigger(MagicMock()) is False


@patch('src.triggers.get_issue_comments')
def test_has_pull_request_trigger(mock_get_comments):
    """Test detection of pull request trigger"""
    # Setup mock comments
    comment1 = MagicMock()
    comment1.body = "Normal comment"
    comment2 = MagicMock()
    comment2.body = "Created pull request"

    # Test with trigger in last comment
    mock_get_comments.return_value = [comment1, comment2]
    assert has_pull_request_trigger(MagicMock()) is True

    # Test with trigger not in last comment
    mock_get_comments.return_value = [comment2, comment1]
    assert has_pull_request_trigger(MagicMock()) is False

    # Test with no comments
    mock_get_comments.return_value = []
    assert has_pull_request_trigger(MagicMock()) is False


@patch('src.triggers.get_issue_comments')
def test_has_pr_creation_comment(mock_get_comments):
    """Test detection of PR creation comment"""
    # Setup mock comments
    comment1 = MagicMock()
    comment1.body = "Normal comment"
    comment2 = MagicMock()
    comment2.body = "Created pull request https://github.com/test/repo/pull/1"

    # Test with PR creation comment
    mock_get_comments.return_value = [comment1, comment2]
    has_comment, comment_body = has_pr_creation_comment(MagicMock())
    assert has_comment is True
    assert comment_body == "Created pull request https://github.com/test/repo/pull/1"

    # Test without PR creation comment
    mock_get_comments.return_value = [comment1]
    has_comment, comment_body = has_pr_creation_comment(MagicMock())
    assert has_comment is False
    assert comment_body is None
