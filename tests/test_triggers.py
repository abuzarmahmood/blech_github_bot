import sys # noqa
import os # noqa

# Add the src directory to the path so we can import the modules
sys.path.insert(0, os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..'))) # noqa

from src.triggers import (
    has_blech_bot_tag,
    has_generate_edit_command_trigger,
    has_bot_response,
    has_user_feedback,
    has_develop_issue_trigger,
    has_pull_request_trigger,
    has_pr_creation_comment,
    has_error_comment,
    has_user_comment_on_pr
)
from src.git_utils import has_linked_pr, get_linked_pr
from src.git_utils import get_issue_comments
from unittest.mock import Mock, patch
import unittest



class TestTriggers(unittest.TestCase):

    def test_has_blech_bot_tag(self):
        # Test with the tag present
        mock_label = Mock()
        mock_label.name = "blech_bot"
        issue_with_tag = Mock()
        issue_with_tag.labels = [mock_label]

        # Test with the tag absent
        mock_other_label = Mock()
        mock_other_label.name = "other_tag"
        issue_without_tag = Mock()
        issue_without_tag.labels = [mock_other_label]

        # Test with empty labels
        issue_empty_labels = Mock()
        issue_empty_labels.labels = []

        self.assertTrue(has_blech_bot_tag(issue_with_tag))
        self.assertFalse(has_blech_bot_tag(issue_without_tag))
        self.assertFalse(has_blech_bot_tag(issue_empty_labels))

    @patch('src.triggers.get_issue_comments')
    def test_has_generate_edit_command_trigger(self, mock_get_comments):
        # Test with trigger in comments
        mock_comment_with_trigger = Mock()
        mock_comment_with_trigger.body = "This is a comment with [ generate_edit_command ]"
        mock_get_comments.return_value = [mock_comment_with_trigger]

        self.assertTrue(has_generate_edit_command_trigger(Mock()))

        # Test without trigger in comments
        mock_comment_without_trigger = Mock()
        mock_comment_without_trigger.body = "This is a regular comment"
        mock_get_comments.return_value = [mock_comment_without_trigger]

        self.assertFalse(has_generate_edit_command_trigger(Mock()))

        # Test with empty comments
        mock_get_comments.return_value = []

        self.assertFalse(has_generate_edit_command_trigger(Mock()))

    @patch('src.triggers.get_issue_comments')
    def test_has_bot_response(self, mock_get_comments):
        # Test with bot response
        mock_bot_comment = Mock()
        mock_bot_comment.body = "This comment was generated by blech_bot"
        mock_get_comments.return_value = [mock_bot_comment]

        self.assertTrue(has_bot_response(Mock()))

        # Test without bot response
        mock_user_comment = Mock()
        mock_user_comment.body = "This is a user comment"
        mock_get_comments.return_value = [mock_user_comment]

        self.assertFalse(has_bot_response(Mock()))

        # Test with empty comments
        mock_get_comments.return_value = []

        self.assertFalse(has_bot_response(Mock()))

    @patch('src.triggers.get_issue_comments')
    def test_has_user_feedback(self, mock_get_comments):
        # Test with user feedback after bot comment
        mock_bot_comment = Mock()
        mock_bot_comment.body = "This comment was generated by blech_bot"
        mock_user_comment = Mock()
        mock_user_comment.body = "This is user feedback"
        mock_get_comments.return_value = [mock_bot_comment, mock_user_comment]

        self.assertTrue(has_user_feedback(Mock()))

        # Test without user feedback after bot comment
        mock_get_comments.return_value = [mock_bot_comment]

        self.assertFalse(has_user_feedback(Mock()))

        # Test with user comment before bot comment
        mock_get_comments.return_value = [mock_user_comment, mock_bot_comment]

        self.assertFalse(has_user_feedback(Mock()))

        # Test with empty comments
        mock_get_comments.return_value = []

        self.assertFalse(has_user_feedback(Mock()))

    @patch('src.triggers.get_issue_comments')
    def test_has_develop_issue_trigger(self, mock_get_comments):
        # Test with develop_issue trigger in latest comment
        mock_comment_with_trigger = Mock()
        mock_comment_with_trigger.body = "[ develop_issue ]"
        mock_get_comments.return_value = [Mock(), mock_comment_with_trigger]

        self.assertTrue(has_develop_issue_trigger(Mock()))

        # Test with develop_issue trigger not in latest comment
        mock_comment_without_trigger = Mock()
        mock_comment_without_trigger.body = "Regular comment"
        mock_get_comments.return_value = [
            mock_comment_with_trigger, mock_comment_without_trigger]

        self.assertFalse(has_develop_issue_trigger(Mock()))

        # Test with empty comments
        mock_get_comments.return_value = []

        self.assertFalse(has_develop_issue_trigger(Mock()))

    @patch('src.triggers.get_issue_comments')
    def test_has_pull_request_trigger(self, mock_get_comments):
        # Test with pull_request trigger in latest comment
        mock_comment_with_trigger = Mock()
        mock_comment_with_trigger.body = "Created pull request"
        mock_get_comments.return_value = [Mock(), mock_comment_with_trigger]

        self.assertTrue(has_pull_request_trigger(Mock()))

        # Test with pull_request trigger not in latest comment
        mock_comment_without_trigger = Mock()
        mock_comment_without_trigger.body = "Regular comment"
        mock_get_comments.return_value = [
            mock_comment_with_trigger, mock_comment_without_trigger]

        self.assertFalse(has_pull_request_trigger(Mock()))

        # Test with empty comments
        mock_get_comments.return_value = []

        self.assertFalse(has_pull_request_trigger(Mock()))

    @patch('src.triggers.get_issue_comments')
    def test_has_pr_creation_comment(self, mock_get_comments):
        # Test with PR creation comment
        mock_pr_comment = Mock()
        mock_pr_comment.body = "Created pull request #123"
        mock_get_comments.return_value = [mock_pr_comment]

        result, comment = has_pr_creation_comment(Mock())
        self.assertTrue(result)
        self.assertEqual(comment, "Created pull request #123")

        # Test without PR creation comment
        mock_regular_comment = Mock()
        mock_regular_comment.body = "Regular comment"
        mock_get_comments.return_value = [mock_regular_comment]

        result, comment = has_pr_creation_comment(Mock())
        self.assertFalse(result)
        self.assertIsNone(comment)

        # Test with empty comments
        mock_get_comments.return_value = []

        result, comment = has_pr_creation_comment(Mock())
        self.assertFalse(result)
        self.assertIsNone(comment)

    @patch('src.triggers.get_issue_comments')
    def test_has_error_comment(self, mock_get_comments):
        # Test with error comment
        mock_error_comment = Mock()
        mock_error_comment.body = "Traceback (most recent call last): Error occurred"
        mock_get_comments.return_value = [mock_error_comment]

        self.assertTrue(has_error_comment(Mock()))

        # Test without error comment
        mock_regular_comment = Mock()
        mock_regular_comment.body = "Regular comment"
        mock_get_comments.return_value = [mock_regular_comment]

        self.assertFalse(has_error_comment(Mock()))

        # Test with empty comments
        mock_get_comments.return_value = []

        self.assertFalse(has_error_comment(Mock()))

    @patch('src.triggers.get_issue_comments')
    @patch('src.triggers.has_linked_pr')
    @patch('src.triggers.get_linked_pr')
    def test_has_user_comment_on_pr(self, mock_get_linked_pr, mock_has_linked_pr, mock_get_comments):
        # Test with user comment on issue
        mock_user_comment = Mock()
        mock_user_comment.body = "User comment"
        mock_get_comments.return_value = [mock_user_comment]

        self.assertTrue(has_user_comment_on_pr(Mock()))

        # Test with only bot comment on issue
        mock_bot_comment = Mock()
        mock_bot_comment.body = "generated by blech_bot"
        mock_get_comments.return_value = [mock_bot_comment]

        # Set up for PR comments check
        mock_has_linked_pr.return_value = True
        mock_pr = Mock()
        mock_get_linked_pr.return_value = mock_pr

        # Test with user comment after bot comment on PR
        mock_get_comments.side_effect = [
            [mock_bot_comment],  # Issue comments
            [mock_bot_comment, mock_user_comment]  # PR comments
        ]

        self.assertTrue(has_user_comment_on_pr(Mock()))

        # Test with only bot comment on PR
        mock_get_comments.side_effect = [
            [mock_bot_comment],  # Issue comments
            [mock_bot_comment]  # PR comments
        ]

        self.assertFalse(has_user_comment_on_pr(Mock()))

        # Test with no linked PR
        mock_has_linked_pr.return_value = False
        mock_get_comments.side_effect = None
        mock_get_comments.return_value = [mock_bot_comment]

        self.assertFalse(has_user_comment_on_pr(Mock()))

        # Test with exception in PR comments retrieval
        mock_has_linked_pr.return_value = True
        mock_get_linked_pr.side_effect = Exception("PR retrieval error")

        self.assertFalse(has_user_comment_on_pr(Mock()))


if __name__ == '__main__':
    unittest.main()
