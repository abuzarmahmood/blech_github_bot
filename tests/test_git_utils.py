"""
Tests for the git_utils module
"""
from github.Repository import Repository
from github import Github
from src.git_utils import (
    clean_response,
    get_github_client,
    get_repository,
    get_issue_comments,
    get_issue_details,
    write_issue_response,
    is_pull_request
)
import os
import sys
import pytest
from unittest.mock import MagicMock, patch

# Add src directory to path
src_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(src_dir)


def test_clean_response():
    """Test cleaning response text"""
    # Test removing TERMINATE
    response = "This is a response. TERMINATE"
    cleaned = clean_response(response)
    assert "TERMINATE" not in cleaned
    assert cleaned == "This is a response."

    # Test handling signatures
    response = "Response\n\n---\n*This response was automatically generated by blech_bot*"
    cleaned = clean_response(response)
    assert cleaned == response

    # Test handling duplicate signatures
    response = "Response\n\n---\n*This response was automatically generated by blech_bot*\n\n---\n*This response was automatically generated by blech_bot*"
    cleaned = clean_response(response)
    assert cleaned.count(
        "*This response was automatically generated by blech_bot*") == 1


@patch('src.git_utils.Github')
@patch('src.git_utils.os')
def test_get_github_client(mock_os, mock_github):
    """Test GitHub client initialization"""
    # Setup mock
    mock_os.getenv.return_value = "test-token"
    mock_github.return_value = "github-client"

    # Call function
    client = get_github_client()

    # Verify
    mock_os.getenv.assert_called_with('GITHUB_TOKEN')
    mock_github.assert_called_with("test-token")
    assert client == "github-client"

    # Test error case
    mock_os.getenv.return_value = None
    with pytest.raises(ValueError):
        get_github_client()


@patch('src.git_utils.get_github_client')
def test_get_repository(mock_get_client):
    """Test repository retrieval"""
    # Setup mock
    mock_client = MagicMock()
    mock_repo = MagicMock(spec=Repository)
    mock_client.get_repo.return_value = mock_repo
    mock_get_client.return_value = mock_client

    # Call function
    repo = get_repository(mock_client, "test/repo")

    # Verify
    mock_client.get_repo.assert_called_with("test/repo")
    assert repo == mock_repo

    # Test error case
    mock_client.get_repo.side_effect = Exception("Repo not found")
    with pytest.raises(ValueError):
        get_repository(mock_client, "nonexistent/repo")


def test_get_issue_comments():
    """Test filtering issue comments"""
    # Create mock issue with comments
    issue = MagicMock()
    comment1 = MagicMock()
    comment1.body = "Normal comment"
    comment2 = MagicMock()
    comment2.body = "Comment with app.grapite.dev reference"

    # Setup mock comments
    issue.get_comments.return_value = [comment1, comment2]

    # Call function
    comments = get_issue_comments(issue)

    # Verify filtering
    assert len(comments) == 1
    assert comments[0].body == "Normal comment"


def test_get_issue_details():
    """Test extracting issue details"""
    # Create mock issue
    issue = MagicMock()
    issue.number = 123
    issue.title = "Test Issue"
    issue.body = "Issue body"
    issue.state = "open"
    issue.created_at = "2023-01-01"
    issue.updated_at = "2023-01-02"
    issue.comments = 5

    label = MagicMock()
    label.name = "bug"
    issue.labels = [label]

    assignee = MagicMock()
    assignee.login = "testuser"
    issue.assignees = [assignee]

    # Call function
    details = get_issue_details(issue)

    # Verify
    assert details["number"] == 123
    assert details["title"] == "Test Issue"
    assert details["body"] == "Issue body"
    assert details["state"] == "open"
    assert details["created_at"] == "2023-01-01"
    assert details["updated_at"] == "2023-01-02"
    assert details["comments_count"] == 5
    assert details["labels"] == ["bug"]
    assert details["assignees"] == ["testuser"]


@patch('src.git_utils.create_issue_comment')
def test_write_issue_response(mock_create_comment):
    """Test writing response to issue"""
    # Setup
    issue = MagicMock()
    response = "Test response"

    # Call function
    write_issue_response(issue, response)

    # Verify signature was added
    mock_create_comment.assert_called_once()
    called_with = mock_create_comment.call_args[0][1]
    assert "Test response" in called_with
    assert "*This response was automatically generated by blech_bot" in called_with


def test_is_pull_request():
    """Test detection of pull requests"""
    # Create mock issue and PR
    issue = MagicMock()
    issue.html_url = "https://github.com/test/repo/issues/1"

    pr = MagicMock()
    pr.html_url = "https://github.com/test/repo/pull/2"

    # Test
    assert is_pull_request(issue) is False
    assert is_pull_request(pr) is True
