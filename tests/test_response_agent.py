"""
Tests for the response_agent.py module
"""
import os
import sys
import pytest
from unittest.mock import MagicMock, patch

# Add the src directory to the path
src_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'src')
sys.path.append(src_dir)

import response_agent
from bot_tools import create_mock_issue, create_mock_comment, create_mock_pull_request

# Mock GitHub objects
class MockIssue:
    def __init__(self, data):
        self.number = data["number"]
        self.title = data["title"]
        self.body = data["body"]
        self.labels = [MockLabel(label["name"]) for label in data["labels"]]
        self.user = MockUser(data["user"]["login"])
        self.comments_url = data["comments_url"]
        self.html_url = data["html_url"]
        self._comments = []
    
    def get_comments(self):
        return self._comments
    
    def add_to_labels(self, label_name):
        self.labels.append(MockLabel(label_name))
    
    def create_issue_comment(self, body):
        comment = MockComment({
            "id": len(self._comments) + 1,
            "body": body,
            "user": {"login": "blech_bot"},
            "created_at": "2023-01-01T00:00:00Z"
        })
        self._comments.append(comment)
        return comment

class MockLabel:
    def __init__(self, name):
        self.name = name

class MockUser:
    def __init__(self, login):
        self.login = login

class MockComment:
    def __init__(self, data):
        self.id = data["id"]
        self.body = data["body"]
        self.user = MockUser(data["user"]["login"])
        self.created_at = data["created_at"]
        self.html_url = data.get("html_url", "")

class MockPullRequest(MockIssue):
    def __init__(self, data):
        super().__init__(data)
        self.head = MockRef(data["head"]["ref"])
    
class MockRef:
    def __init__(self, ref):
        self.ref = ref

class MockRepository:
    def __init__(self, name="test/test"):
        self.full_name = name
        self.default_branch = "main"
    
    def get_pull(self, number):
        return MockPullRequest(create_mock_pull_request(number))

# Test fixtures
@pytest.fixture
def mock_github_client():
    client = MagicMock()
    client.get_repo.return_value = MockRepository()
    return client

@pytest.fixture
def mock_issue():
    return MockIssue(create_mock_issue())

@pytest.fixture
def mock_issue_with_feedback():
    issue = MockIssue(create_mock_issue())
    # Add bot response
    issue._comments.append(MockComment(create_mock_comment(
        body="Initial response\n\n---\n*This response was automatically generated by blech_bot using model gpt-4o*",
        user_login="blech_bot"
    )))
    # Add user feedback
    issue._comments.append(MockComment(create_mock_comment(
        body="Can you explain more about X?",
        user_login="test_user"
    )))
    return issue

@pytest.fixture
def mock_issue_with_edit_command():
    issue = MockIssue(create_mock_issue(
        title="[blech_bot] Fix bug in function X",
        body="Please generate an edit command to fix the bug in function X"
    ))
    issue.labels.append(MockLabel("blech_bot"))
    return issue

@pytest.fixture
def mock_pr():
    return MockPullRequest(create_mock_pull_request())

# Tests for response generation
@patch('response_agent.get_github_client')
@patch('response_agent.get_repository')
@patch('response_agent.bot_tools.get_local_repo_path')
def test_generate_new_response(mock_get_repo_path, mock_get_repo, mock_get_client, mock_issue):
    # Setup mocks
    mock_get_repo_path.return_value = "/tmp/test_repo"
    mock_get_repo.return_value = MockRepository()
    mock_get_client.return_value = MagicMock()
    
    # Mock the LLM response
    with patch('response_agent.create_agent') as mock_create_agent:
        mock_agent = MagicMock()
        mock_agent.initiate_chat.return_value.chat_history = [
            {"role": "assistant", "content": "Test response"}
        ]
        mock_create_agent.return_value = mock_agent
        
        # Test the function
        with patch('response_agent.get_issue_details') as mock_get_details:
            mock_get_details.return_value = {"title": "Test Issue", "body": "Test body"}
            response, _ = response_agent.generate_new_response(mock_issue, "test/test")
            
            # Verify response contains signature
            assert "Test response" in response
            assert "*This response was automatically generated by blech_bot" in response

@patch('response_agent.get_github_client')
@patch('response_agent.get_repository')
@patch('response_agent.bot_tools.get_local_repo_path')
def test_generate_feedback_response(mock_get_repo_path, mock_get_repo, mock_get_client, mock_issue_with_feedback):
    # Setup mocks
    mock_get_repo_path.return_value = "/tmp/test_repo"
    mock_get_repo.return_value = MockRepository()
    mock_get_client.return_value = MagicMock()
    
    # Mock the LLM response
    with patch('response_agent.create_agent') as mock_create_agent:
        mock_agent = MagicMock()
        mock_agent.initiate_chat.return_value.chat_history = [
            {"role": "assistant", "content": "Updated response with more details"}
        ]
        mock_create_agent.return_value = mock_agent
        
        # Test the function
        with patch('response_agent.get_issue_details') as mock_get_details:
            mock_get_details.return_value = {"title": "Test Issue", "body": "Test body"}
            with patch('response_agent.get_issue_comments') as mock_get_comments:
                mock_get_comments.return_value = mock_issue_with_feedback._comments
                response, _ = response_agent.generate_feedback_response(mock_issue_with_feedback, "test/test")
                
                # Verify response contains signature
                assert "Updated response with more details" in response
                assert "*This response was automatically generated by blech_bot" in response

@patch('response_agent.get_github_client')
@patch('response_agent.get_repository')
@patch('response_agent.bot_tools.get_local_repo_path')
def test_generate_edit_command_response(mock_get_repo_path, mock_get_repo, mock_get_client, mock_issue_with_edit_command):
    # Setup mocks
    mock_get_repo_path.return_value = "/tmp/test_repo"
    mock_get_repo.return_value = MockRepository()
    mock_get_client.return_value = MagicMock()
    
    # Mock the LLM response
    with patch('response_agent.create_agent') as mock_create_agent:
        mock_agent = MagicMock()
        mock_agent.initiate_chat.return_value.chat_history = [
            {"role": "assistant", "content": "Edit command to fix function X:\n```python\ndef fix_function_x():\n    return 'fixed'\n```"}
        ]
        mock_create_agent.return_value = mock_agent
        
        # Test the function
        with patch('response_agent.get_issue_details') as mock_get_details:
            mock_get_details.return_value = {"title": "Test Issue", "body": "Test body"}
            response, _ = response_agent.generate_edit_command_response(mock_issue_with_edit_command, "test/test")
            
            # Verify response contains signature
            assert "Edit command to fix function X" in response
            assert "*This response was automatically generated by blech_bot" in response

# Tests for issue/PR processing flows
@patch('response_agent.get_github_client')
@patch('response_agent.get_repository')
@patch('response_agent.bot_tools.get_local_repo_path')
@patch('response_agent.triggers.has_blech_bot_tag')
def test_process_issue_new_response(mock_has_tag, mock_get_repo_path, mock_get_repo, mock_get_client, mock_issue):
    # Setup mocks
    mock_has_tag.return_value = True
    mock_get_repo_path.return_value = "/tmp/test_repo"
    mock_get_repo.return_value = MockRepository()
    mock_get_client.return_value = MagicMock()
    
    # Mock check_triggers and response_selector
    with patch('response_agent.check_triggers') as mock_check_triggers:
        mock_check_triggers.return_value = "new_response"
        with patch('response_agent.response_selector') as mock_response_selector:
            mock_response_func = MagicMock()
            mock_response_func.return_value = ("Test response", ["Test response"])
            mock_response_selector.return_value = mock_response_func
            
            # Mock write_issue_response
            with patch('response_agent.write_issue_response') as mock_write_response:
                success, _ = response_agent.process_issue(mock_issue, "test/test")
                
                # Verify success and that write_issue_response was called
                assert success is True
                mock_write_response.assert_called_once()

@patch('response_agent.get_github_client')
@patch('response_agent.get_repository')
@patch('response_agent.bot_tools.get_local_repo_path')
@patch('response_agent.triggers.has_blech_bot_tag')
@patch('response_agent.triggers.has_develop_issue_trigger')
@patch('response_agent.is_pull_request')
def test_process_issue_develop_flow(mock_is_pr, mock_has_develop, mock_has_tag, 
                                   mock_get_repo_path, mock_get_repo, mock_get_client, mock_issue):
    # Setup mocks
    mock_is_pr.return_value = False
    mock_has_tag.return_value = True
    mock_has_develop.return_value = True
    mock_get_repo_path.return_value = "/tmp/test_repo"
    mock_get_repo.return_value = MockRepository()
    mock_get_client.return_value = MagicMock()
    
    # Mock develop_issue_flow
    with patch('response_agent.develop_issue_flow') as mock_develop_flow:
        mock_develop_flow.return_value = (True, None)
        
        success, _ = response_agent.process_issue(mock_issue, "test/test")
        
        # Verify success and that develop_issue_flow was called
        assert success is True
        mock_develop_flow.assert_called_once_with(mock_issue, "test/test", is_pr=False)

@patch('response_agent.get_github_client')
@patch('response_agent.get_repository')
@patch('response_agent.bot_tools.get_local_repo_path')
@patch('response_agent.triggers.has_blech_bot_tag')
@patch('response_agent.is_pull_request')
def test_process_pr_flow(mock_is_pr, mock_has_tag, mock_get_repo_path, mock_get_repo, mock_get_client, mock_pr):
    # Setup mocks
    mock_is_pr.return_value = True
    mock_has_tag.return_value = True
    mock_get_repo_path.return_value = "/tmp/test_repo"
    mock_get_repo.return_value = MockRepository()
    mock_get_client.return_value = MagicMock()
    
    # Mock standalone_pr_flow
    with patch('response_agent.standalone_pr_flow') as mock_pr_flow:
        mock_pr_flow.return_value = (True, None)
        
        success, _ = response_agent.process_issue(mock_pr, "test/test")
        
        # Verify success and that standalone_pr_flow was called
        assert success is True
        mock_pr_flow.assert_called_once_with(mock_pr, "test/test")
